
///

To ask Henry:

DI pattern from SO / Codereview

parallel sourcing of deps - how to call shared fns only once

///

 add a propaganda link in the Suman docs - showing:

 the difference!

 1:1 process to test file



///

 TODO: improve delay/resume so that it works with inject

///

  if using macro and more than 1 Test.create, all of those will be called.

///

  => DI =>

  for create:

  source userData from suman.once.pre.js / arguments passed via macros -
  $ioc, $pre and $macro should be reserved
  source inject/before/after, etc
  source ioc,
  then, if allow top-level-deps, then source those
  finally core modules,
  if no match, throw error

  for describe:

  source inject/before/after, etc
  source injections  (check to ensure that injections are not reserved keywords)
  source top-level
  source core-modules


///

if using runner, stderr from test case fails should still be written

///

http://stackoverflow.com/a/34703425/1223975

///

https://docs.docker.com/swarm/reference/swarm/

////

if there are any test errors or warnings, print out a link
to the relavent log files
if there is one test error, pass the exact link to that file
if there are multiple errors, just print a link to test/_suman/logs/tests directory

if there is no stderr for a test, we should delete the file in the /tests directory

////

use child unref after all children have exited in suman runner

By default, the parent will wait for the detached child to exit. To prevent the parent from waiting for a given child,
use the child.unref() method. Doing so will cause the parent's event loop to not include the child in its reference count,
allowing the parent to exit independently of the child, unless there is an established IPC channel between the child and parent.

///

top-level can see IOC injections, other describe blocks can only see inject functions,
thus, no conflict

///

proper plugin system for suman
https://github.com/substack/tape/issues/341#issuecomment-273993725

////

end-to-end front-end testing:
https://twitter.com/mpjme/status/811184862954737665

/////

https://github.com/nodejs/help/issues/389

////

var timesFunction = function(callback) {
    if (typeof callback !== 'function' ) {
        throw new TypeError('Callback is not a function');
    } else if( isNaN(parseInt(Number(this.valueOf()))) ) {
        throw new TypeError('Object is not a valid number');
    }
    for (var i = 0; i < Number(this.valueOf()); i++) {
        callback(i);
    }
};

Number.prototype.times = timesFunction;

//////

if path does not exist, check to see if path exists directly in test/test-src
create auto-complete after typing with suman to test-src dir, so user does not have to type

test/test-src all the time

///

data from pre should be separate from ioc data - that way if the user requests the pre data, but did not
use any pre: [] options, an error will be thrown or at least a warning will be logged

////

guarantee that suman.once.pre.js callbacks are run in series in the order in which they are declared

///

we should maintain that series block which forces tests to run in series, that way multiple devs
working on the same project know that it will be ok to make things async if the series block is already there

///

assert that a test takes a certain amount of time, if the test runs too fast, it is likely running
synchronously, or some async feature is not working correctly

///

DI should work suman.hooks.js, so you can inject suite, before, after, etc

///

should have hook for each root suite, so we can inject ids

////

 add the ability to make an after hook the last hook, or first hook, despite the order in which it was registered,
 same with before hook (make it run first or last)

///

npm de-dupe => https://docs.npmjs.com/cli/dedupe

////

closure compiler:
https://developers.google.com/closure/compiler/

////

set -e at top of bash script
https://www.quora.com/When-writing-a-shell-script-how-do-you-verify-that-a-command-completes-successfully

////

git.io shortlinks / tinyurls, as in (https://git.io/vMUyr)

////

=> have to ask npm why if we run npm test in child process, that the process.send doesn't work

/////

runner stdio =>  pipe results to parent

////

cd suman-test/suman-test-projects && suman $(find subprojects -mindepth 2 -maxdepth 2 -name "test.sh" | xargs ) --concurrency=1

////

need to accumulate errors and show them at the end, whether it's the runner or with suman

////

if you point the suman runner to directories, and the directory has suman_test.sh, suman will run that?
no, just point suman to suman_test.sh, yourself!

////

incorporate suman.order.js with suman.groups.js

////

use suman-server for suman optional dependencies install mutex, in place of lockfile

////

add do's and do not's to readme

////

//TODO: create suman --diagnostics option at command line to check for common problems with both project and test suites
// list of checks

1. testSrcDir and testTargetDir need to be same level

2. if suman or suman/logs does not exist, need to tell user to install suman (or suman should create if they don't exist)

/////

http://www.2ality.com/2015/03/no-promises.html

/////

run mocha tests in browser - use child process
=> browser tests should be => test.browser.js

////

http://www.thegeekstuff.com/2010/11/50-linux-commands/
http://www.thegeekstuff.com/2010/08/ipcs-command-examples/

/////

instead of use-server, use-babel, use-whatever, we try to use require.resolve(),
and if not, we install them on the fly

/////

suman-test-projects => should work suman#dev and suman#staging and suman#master

////

websockets in java
https://github.com/firebase/TubeSock

/////

https://github.com/integrations/feature/continuous-integration

/////

ava stores the babel .cache in node_modules/.cache/ava

/////

use pkill to kills suman procs

/////

npm install material-ui@next
npm @next vs @latest

/////

suman-meta => uses git-clone-all-org-repos and then runs the build.sh file, which should checkout all the right branches from remote repo.

/////

https://github.com/avajs/ava/issues/1147

/////

java / spark / go / python

//////

SUMAN_SINGLE_PROCESS needs to forbid non-js file

//////////

 =>
        *default

 =>
        { host: '127.0.0.1', port: 6969 }

//////////

debugging with node debug <pid> etc
https://github.com/nodejs/help/issues/363#issuecomment-260213843

////////

http://stackoverflow.com/questions/31578446/running-a-script-inside-a-docker-container-using-shell-script
http://timmurphy.org/2015/02/27/running-multiple-programs-in-a-docker-container-from-the-command-line/

suman.groups.js =>

if container:

1. script =>    use -c option to execute script in already running container?

2. getPathToScript =>  copy the script to entrypoint

3. run        => if they use useContainer:true, seems like we always need these functions to be defined
   build

choose either getPathToScript, or getListOfTestFiles
=> either suman will just run the script in a container, or suman will autogenerate a script file
then run that in a container, based off of the list of test files

use kubernetes to run tests on different nodes in a cluster
http://kubernetes.io/docs/getting-started-guides/minikube/

/////////

TODO: incorporate nyc also as example, make sure it works
todo: make coverage take one argument --coverage istanbul --coverage nyc

/////////

//if base directory is not home or users, then we are installing globally, so always install all
//TODO: what about NVM?

////////

each language option should be a plugin, each plugin needs to have an entrypoint
enable writing tests in any language, as long as the child process fulfills the IPC contract

////////

cd suman && npm install suman -f   // force

/////

refactor FILE_IS_NOT_DOT_JS   => FILE_IS_NOT_ACCEPTED_EXTENSION

/////

if npm root -g is in user home, maybe we can use that cache instead (probably not)

////

send usage data to slack (create app to track data)

/////

we want a separate script to checkout master, run tests, then publish
right now we have an npm publish script which might make staging the published branch instead of master
even though master and staging should never be different

/////

suman-to-tap => just like suman-troubleshoot, will distill/translate output to only the tap output (?)

////

if not installing as daemon - should only install the deps explicitly declared in suman.conf.js

in other words - if suman.conf.js is not present - install all deps as daemon,
if it is present, only install deps declared as foreground process

////

test-errors should be created whenever suman is run

/////

top level dependencies in package.json could be auto sourced in callback function

////

source modules from ~/.npm cache if we can't find them in ~/.suman/node_modules

/////

if project with suman as a dependency are being installed in parallel, then .suman/node_modules will be
written to in parallel, need to mitigate this (hopefully the queue works)

if someone is installing project for first time (ie, no suman.conf.js file), then we should install all
optional deps as a daemon process.

/////

require.resolve('istanbul') - we want executable, not package.json.main

https://github.com/nodejs/help/issues/388
https://github.com/nodejs/help/issues/389
https://www.npmjs.com/package/which

//////

watch should be on a per terminal basis, when user closes terminal, they stop watching

///////

create symbolic link from ~/.suman/node_modules/.bin/istanbul to ./node_modules/.bin/istanbul
http://stackoverflow.com/questions/1951742/how-to-symlink-a-file-in-linux

///////

~/suman/test_results are still being written out

///////

 in --interactive, on final countdown from 10, only listen for backspace event instead of all stdin keys

///////

we can use npm link to link ~/.suman/node_modules
this *may* install the binaries from ~/.suman/node_modules to the local project (?)
only need those if the user wants to run them

not a good idea beacuse if user deletes node_modules dir, then we will have to call npm link again

/////

if user is root, can we write .suman directory to ~/.suman?

//////

because Poolio depends on Suman, we might need to install suman with --production / --only-production flag

///////

pnpm, ied => https://github.com/tapjs/node-tap/issues/333#issuecomment-264680790

///////

TODO: when running require('suman'), it will try to load suman.conf.js, which is bad when trying to run init!
it will throw an error if suman.conf.js does not exist

/////////

https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04

////////

https://semver.npmjs.com/

///////////

https://medium.com/@mbostock/prereleases-and-npm-e778fc5e2420#.v7sfbacbc

/////////

http://stackoverflow.com/questions/40902445/using-variable-interpolation-in-string-in-docker/40903689#40903689

/////////

=> suman should write out .suman-babelrc always ?
we need babel to support different paths to .babelrc files

////////

tail multiple files:
http://www.thegeekstuff.com/2009/09/multitail-to-view-tail-f-output-of-multiple-log-files-in-one-terminal

/////////

=> load suman-inquirer and suman-inquirer-directory from NPM instead of installing first

///////

=> Cache dependencies => https://docs.npmjs.com/cli/cache, instead of writing them to .suman/node_modules

/////////

creating documentation site:
https://code.google.com/p/gitiles/

/////////

headless chrome browser
https://gist.github.com/addyosmani/5336747
 >>>> this >>>> https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md
https://github.com/dhamaniasad/HeadlessBrowsers

/////////

npm ls x
npm la x   // list dependencies in your project that depend on x

////////////

need to make suman.load() work with relative paths

///////////

Docker:
https://www.ctl.io/developers/blog/post/dockerfile-entrypoint-vs-cmd/

/////////////

send the exit code with each FATAL message to runner, so that we don't print unnecessary errors
in the runner for tests that are expected to exit with a certain non-zero exit code

////////////

C++ addons for speed
https://medium.com/developers-writing/how-to-get-a-performance-boost-using-node-js-native-addons-fd3a24719c85#.ko1c8huw8

///////////

test macros, important

///////////

readlink => need to install it on a mac
in init, need to run "which readlink", if it's not there, need to log big red warning

//////////

expect a 56 error for this test - or maybe    TEST_ERROR_AND_BAIL_IS_TRUE: 80,
/Users/Olegzandr/WebstormProjects/oresoftware/suman/test/testsrc/es5-es6/build-recursion-tests/empty.test.js

////////

suman is sending the runner the same errors twice (process.send())
https://www.dropbox.com/s/kr6x1c0d3a5ccpg/Screenshot%202016-11-28%2014.54.55.png?dl=0

////////

if we use SUMAN_SINGLE_PROCESS=yes, if suman tests spawn suman tests, then those will be forced to be SSP also
because of nature of environment vars.

////////


https://www.ctl.io/developers/blog/post/dockerfile-entrypoint-vs-cmd/

///////

add labjs to readme tables

/////////

http://unix.stackexchange.com/questions/34273/can-i-pipe-stdout-on-one-server-to-stdin-on-another-server

utilize multiple machines in a local network, instead of running 100 tests on one machine, or whatever
how to do this? suman code shouldn't have to change, instead, we create different bash scripts

/////////

add to docs:
Preventing false negatives
preventing false positives

/////////

expected exit codes => need to work on it

////////////

if user calls t.done() and there is no cb, this.test.cb, should log warnings

////////////

spawn child process, make sure no_silent or whatever options are available

1. file
2. silent /dev/null
3. inherit

 (1) the parent process should just inherit the stdio from the children so that it's all logged in the original terminal,
 (2) to send the stdio to a file, or
 (3) send all stdio to /dev/null

///////////

implement:

  enforceTestCaseNames: true,
    enforceBlockNames: true,

////////

debugStrm
 const debugStrm = fs.createWriteStream(path.resolve(global.sumanHelperDirRoot + '/logs/suman-debug.log'));

/////////

how to use babel vs babel-node
https://github.com/babel/example-node-server

//////////

http://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash

/////////////

http://stackoverflow.com/questions/40800418/resolving-path-with-bash/40800713?noredirect=1#comment68825967_40800713

/////////

if Suman usage warning: no suman.once.pre.js file found
then if there are any integrants/pre: [], we have to throw an error

//////////

syntax highlighting for npm module
(if you you ignore node_modules syntax highlighting seem to be off)

//////////

need to validate suman.conf.js when we read it in

 AssertionError:  => Suman usage error => "testSrcDir" and "testTargetDir" must be at the same level in your project =>
but in this cased testSrcDir is not defined

/////////

restore default $HOME/.suman dir, using suman --restore-default-suman-home-dir
(probably will run create-suman-dir.js)

///////////

"$ which suman" will work
https://www.dropbox.com/s/echzmuzcxjnuorw/Screenshot%202016-11-24%2018.18.47.png?dl=0

///////////

http://stackoverflow.com/questions/27701930/add-user-to-docker-container

/////////

#!/usr/bin/env node -- --inspect
https://github.com/creationix/nvm/issues/1318#event-869975010

///////////

should node --inspect / suman-inspect only be for one file (not --inspecting the runner)?

//////////////////////////////////////

make sure falsy is ok, 0 exit codes passed to t.done() should not fail test.

/////////////////

if sumanOpts.strict => then we fail early if certain files don't exist, like certain suman helpers files

alternatively it could be strict = !lax

///////

http://www.codeproject.com/Questions/1157471/Redirecting-shell-output-via-grep

////////

//TODO: make this path reference the resolved paths in the resolved paths module
        const globalHooks = require(path.resolve(global.sumanHelperDirRoot + '/suman.hooks.js'));
        //in create-suman-runner =>
         const orderPath = path.resolve(global.sumanHelperDirRoot + '/suman.order.js');

//////////

TODO: we need to create shared suman-config loading file so that in index and lib/index it uses same logic

/////////

add suman-debug / suman--debug  --paths=["a.js","b.js"]

/////////

forwarding event emitters
https://stackoverflow.com/questions/40856154/forwarding-events-from-one-event-emitter-to-another

////////

update visit *** (every sequence of *** is a future hyperlink that needs filling in)

///////

TODO:

run tests
debug tests
run tests with test coverage
watch project and run/transpile tests on changes

///////

https://nodejs.org/api/tty.html
http://stackoverflow.com/questions/24582183/how-to-stream-to-from-a-file-descriptor-in-node
https://github.com/nodejs/help/issues/365#issuecomment-260574249
https://github.com/nodejs/help/issues/366#issuecomment-260749863
https://github.com/nodejs/help/issues/363#issuecomment-260245021
https://github.com/nodejs/help/issues/363#issuecomment-260213843

////////

TODO: passing rate => 1 stubbed, 5 passed, 6 total, passing rate is 83.33%?

//////////////

TODO: integrate suman once with gulp programmatically

///////////

https://github.com/gulpjs/gulp/issues/770#issuecomment-259282294

////////////

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

var execSync = require('child_process').execSync;
var opn = require('opn');

function openBrowser(url) {
  if (process.platform === 'darwin') {
    try {
      // Try our best to reuse existing tab
      // on OS X Google Chrome with AppleScript
      execSync('ps cax | grep "Google Chrome"');
      execSync(
        'osascript chrome.applescript ' + url,
        {cwd: __dirname, stdio: 'ignore'}
      );
      return true;
    } catch (err) {
      // Ignore errors.
    }
  }
  // Fallback to opn
  // (It will always open new tab)
  try {
    opn(url);
    return true;
  } catch (err) {
    return false;
  }
}

module.exports = openBrowser;


///////////////////

no_silent option needs to be replaced with (pipe, ignore, inherit, etc)

///////////

//TODO: parse (subset of?) command line opts for plain node Suman run?

///////////

TODO: runner should show which order files are read, and then if --rand is chosen, the random order in which
they will run

/////////////////

TODO: do better checks to make sure TDD/BDD interface and give user better warnings if using before instead of setup etc
TODO: /Users/Olegzandr/WebstormProjects/oresoftware/suman/test/testsrc/es5-es6/build-recursion-tests/tes-t7-start.test.js

//////////

TODO: provide expected exit-code in test file, so that when runner sees exit code, it is OK with it and says
56 (expected)

////////////

TODO: double check to see if bail option is always sumanOpts and also make it work with suman.conf.js too

///////

//TODO: runner lock would allow only one instance of the runner to run at a time, perhaps putting requests in a queue
//TODO: suman --clear-runner-queue would delete all lines in the file that queued runner runs
//TODO: add runner-lock to roadmap
//TODO: runnerLock: false should be default in suman.conf.js

///////

 //TODO: allow printing of just one line of results, until a failure
 //readline.clearLine(process.stdout, 0);
 //process.stdout.write('\r' + chalk.green('Pass count: ' + successCount));

/////////

 => Users should be able to provide expected exit codes in another place besides in suman.init()

//////////

TODO: allow for istanbul test coverage in runner child processes

//////////

TODO: regexes seem to match against test-target instead of test-src etc?

///////////

add "append-match-none"

/////////////

suman recommends usage of nvm, so that your global modules actually get installed into your user directory

////////////

TODO: when transpile: true, and test-target is not inside test directory, *and* sumanhelpersdir is inside test directory,
then we need to point sumanHelpersDir to the target directory. Basically, whenever sumanHelpersDir is inside the directory
that will get transpiled/moved, we have to update location.

/////////////

--errors-only should be readline/clearLine so pass count simply goes up

////////////

image:

testgroup
testfile
testsuite
testblock

//////////

TODO: use pragmatik in the lib/index.js file so that we can work with opts.skip properly

//////////

 For SUMAN_SINGLE_PROCESS => need to run once.pre before everything and once.post after everything

////////////



change Suites skipped : 1, to Suites skipped  (at least 1)

////////////

TODO: SUMAN_SINGLE_PROCESS => for runner, have it either pass data back to runner table, or don't print table at all,
probably latter is better.

////////////////

 suman --touch   // will touch package.json, which should fire chokidar change events

///////////

assert that typeof second arg is 'object' suman.init(module,{})

/////////

suman --diagnostics

1. check to see if testSrcDir and testTargetDir have the same directory depth, if not, that's a problem
2. ?

////////

need to consolidate multiple Test.describes into one report to send back to runner

////////////

when running with {transpile:true} in suman.conf.js, simply "$ suman" (without -r)
will still transpile *all* of test-src to test-target, (but still only run one file)

////////////

make sure that .babelrc does not get overwritten when using suman --use-babel

/////////////

should always use .babelrc-suman

/////////////

 => beep when a watch-project test fails => https://www.npmjs.com/browse/keyword/beep

////////

need to add SIGINT handler to runner (there is one in lib/index);
this should allow us to run shutdown hooks in any event, and then exit.
if they use two SIGINTs, then shutdown immediately.

///////////


error should be thrown for any key/values passed to suman.init(module,{
   x: 'y'
})


throw new Error('"x" is not an available option, available options are: a b c, etc');

/////////////////

create functionality for timeout option in suman.init(module)

/////////////

create setTimeout and call n.kill if child_process does not exit after X number of seconds

////////////

use NODE_PATH

////////////

 SUMAN_SINGLE_PROCESS=yes suman  //hangs when run in the poolio project

  [hook-params.test.js] seems to be the culprit


/////////////

TODO: if transpile:true, and the user points suman to test-target/xyz, then we should just run the tests, not transpile first

/////////////////

suman.hook.js => suman.shared-hooks.js

///////////////

inject data into suman.once.pre.js, because there is data being injected into suman.once.post.js

///////////////

if uncaughtException is thrown/called, add a global flag, which will be checked by all hooks/test cases
if the --ignore-uncaught-exceptions flag is not set then exit early from hooks/test cases

////////////////

all for a boolean t.failed = true;
that way test code can continue and you can print out results/http responses anyway

///////////////

// matches
    1. run as test matches
    2. convert as suman test matches
    3. transpile matches, vs "copy only" matches


 global.breakpoint = function() {
    if ($config.diagnostics.enable_breakpoints) {
      /*jshint -W087 */
      debugger;
    }
  };


////////////////////

  pass root path to suman helpers

////////////////////


// when running "$ gulp x" in the wrong directory
[12:47:13] Local gulp not found in ~/WebstormProjects/moover
[12:47:13] Try running: npm install gulp


//////////

sqlite = https://www.youtube.com/watch?v=P3C0iO1yqhk


////////////

suman --init: if suman is already installed locally, and version is not too old, don't reinstall

///////

https://github.com/avajs/ava/pull/402

//////////////////////

On linux you can use taskset to run node with a given CPU affinity.
See this post for information on using the start command in Windows to do the same.

http://stackoverflow.com/questions/10829974/taskset-equivalent-in-windows

http://superuser.com/questions/149312/how-to-set-processor-affinity-on-os-x

//////////////////////////////

  3 diagrams, 1 for node a.test.js, 1 for suman a.test.js, 1 for suman --runner a.test.js

  draw a node green arrow through a test script

  ///////////////////

  the runner fails to finish for poolio and for burro, not sure why, perhaps add a timeout for each test
SUMAN_DEBUG=yes suman /Users/Olegzandr/WebstormProjects/burro/test-suman/integration_test.js

  //////////////////////////

//TODO: http://nathanleclaire.com/blog/2014/07/12/10-docker-tips-and-tricks-that-will-make-you-sing-a-whale-song-of-joy/
//TODO: http://stackoverflow.com/questions/8173232/make-exe-files-from-node-js-app
//TODO: create binary of suman project for speed?
//TODO: assert that rootDir is the same as cd'ing two directories higher than suman/index.js


//TODO: "$ suman --stop-watching"
//TODO: write test for installing suman, using containers to spin up some virtual filesystem?
//TODO: "$ suman --convert" with the "--omit-comments"
//TODO: https://github.com/creationix/nvm/issues/668
//TODO: if export is set to true, then we need to exit if we are using the runner

//TODO: use util.format =>    error: util.format('The specified application package "%s" does not exist', params.id)

//TODO: before/after.always

//TODO: verify t.plan/t.confirm
//TODO: monkey patch process.exit
//TODO: in before/after hooks, we should be able to access t.data and pass that to all tests?
//TODO: when re-initting suman and potentially overwriting existing suman files, mv the current suman folder to root and
//TODO: draw data => picture showing ioc injecting data into multiple tests
//TODO: draw data => picture showing data being passed directly to beforeEach and back
//TODO: chsh -s /bin/bash
//TODO: http://unix.stackexchange.com/questions/289573/tailing-file-in-new-terminal-window
//TODO: vi /etc/shells
//TODO: http://stackify.com/11-ways-to-tail-a-log-file-on-windows-unix/
//TODO: http://www.thegeekstuff.com/2009/09/multitail-to-view-tail-f-output-of-multiple-log-files-in-one-terminal/
//TODO: => Suman Server => Uncaught Exception => TypeError: Cannot read property 'transpile' of undefined
//TODO: script.runInThisContext() node
//TODO: if transpile is set to true, the plain "$ suman" command should execute the test-target, not test, dir
//TODO: t.plan() / t.confirm() in hooks
//TODO: need to do suman --tail watcher server runner
//TODO: https://github.com/avajs/ava/blob/47f08e09558e808ddfc017b7fe10405f1a8372c4/docs/recipes/babelrc.md#transpiling-sources
//TODO: https://babeljs.io/docs/usage/require/
//TODO: poolio worker can pre-load as many modules as possible
//TODO: /bin/sh: babel: command not found
//TODO: delay is not defined error - add suman-constant for this
//TODO: inject IOC args for any describe block?
//TODO: using suman --tail x, x should be created if it does not exist for some reason
//TODO: --all option should be the default
//TODO: put all the unit tests for xmp into one suman file and see how fast it is, before we make some sort of choice to run


//TODO: test suite timeout (this.timeout()) needs to work
//TODO:  node $(which suman) can be used to start suman
//TODO: optimize suman by removing any ability to create multiple sumans, make transpile etc run in parallel
//TODO: 'use strict'; is useful when user attemps to overwrite frozen vars
//TODO: to convert files, cp from test to test-temp, rename all test files to a.test.js, then run --convert
//TODO: use .profile instead of .bash_profile?
//TODO: if suman is not installed in a project, and the user tries to run "$ suman" on a test file, suman could choose to install the default files before
// proceeding

//TODO: if suman is not installed yet, we get this error (its looking for the suman folder in the root of the project):

 => Suman fatal error => Error: ENOENT: no such file or directory, stat '/Users/amills/WebstormProjects/vmware/wem_server2/undefined'
    at Error (native)
    at Object.fs.statSync (fs.js:844:18)
    at getAllFiles (/Users/amills/WebstormProjects/oresoftware/suman/lib/runner.js:587:48)
    at /Users/amills/WebstormProjects/oresoftware/suman/lib/runner.js:676:11



//TODO:
	 ⚑  => Suman fatal error  => making a graceful exit =>
	[object Object]


//TODO: describe(__filename, function() {
//TODO: for a given test, should be able to force all things parallel with --parallel flag
//TODO: testing => http://open.blogs.nytimes.com/2015/01/15/how-to-unit-test-a-requirejs-application/?_r=0
//TODO: need to fix suman server so that user can see server errors

 => Suman uncaught exception =>
 Error: Bad server name, does not match any items in your config => "cse-1s-dhcp--98-213.eng.vmware.com"
    at badServerName (/Users/amills/WebstormProjects/oresoftware/suman/lib/find-suman-server.js:22:19)
    at findSumanServer (/Users/amills/WebstormProjects/oresoftware/suman/lib/find-suman-server.js:23:11)
    at Object.Server (/Users/amills/WebstormProjects/oresoftware/suman/lib/index.js:256:15)
    at Object.<anonymous> (/Users/amills/WebstormProjects/oresoftware/suman/index.js:364:8)
    at Module._compile (module.js:541:32)
    at Object.Module._extensions..js (module.js:550:10)
    at Module.load (module.js:458:32)
    at tryModuleLoad (module.js:417:12)
    at Function.Module._load (module.js:409:3)
    at Function.Module.runMain (module.js:575:10)

//https://github.com/maxogden/hexbin/tree/gh-pages/hexagons
// t.plan/t.confirm for hooks?

//--concurrency option should just be "--processes"



//TODO: rename test-stderr.log to test-debug.log and runner-debug.log, along with server.log
//TODO: suman test results table for individual file should have date started as metric
//TODO: for chokidar watcher, need to worry about nested directories using **/* etc, see build-tests
//TODO: when running the runner against the entire test-target dir, the runner hangs, so we need a list of cps that have not exited yet after 30 seconds or whatever
//...special keystrokes should kill all currently running cps and then just collect the best results possible
//TODO: allow suman.once.js and suman.ioc.js to handle generator fns
//TODO: could try "brew install sqlite3" if it's not already installed and running
//TODO: warn if test or hook does not return anything if there is no callback
//TODO: make sure that generator functions get recognized when transpiling isGenerator() check needs to work correctly
//TODO: hook into stdout with node to write to test-stdout.log - https://gist.github.com/pguillory/729616
//TODO: http://krasimirtsonev.com/blog/article/debugging-with-node
//TODO: https://babeljs.io/docs/usage/options/
//TODO: https://www.sitepoint.com/solve-global-npm-module-dependency-problem/
//TODO: CLI-TABLE https://www.npmjs.com/package/cli-table
//TODO: check to verify that transpilation with babel works
//TODO: general rules - if test suite < 10 files, speed up your slowest test, if not, speed up all tests
//TODO: babel-core register - http://stackoverflow.com/questions/35040978/babel-unexpected-token-import-when-running-mocha-tests
//TODO: suman::test gets logged twice when running test-dest/integration/hook.err.js
//TODO: before/after/beforeEach/afterEach need to be this.x even when the second match is not made
//TODO: this.suite = this;
//TODO: t.state = 'passed'/'failed' etc.
//TODO: in a hook "this" should be converted to 't'
//TODO: this.suite from Mocha should be defined
//TODO: change Test to _Test in conversion proc
//TODO: this.timeout() needs to be t.timeout();
//eg: this.describe('port', function (done) {
//TODO: this.timeout in rootsuite and child suites etc.
//TODO: check to see if first arg to done can be any non-null value
//TODO: convert + --debug = put var _d = process.domain() in each hook / test case
//TODO: https://www.npmjs.com/browse/star
//TODO: bash completion with dashdash
//TODO: store "former mocha project" in suman dir, and then run runner from root directory instead of test file dir
//TODO: need to put should at top of test file as mocha uses --require in opts to load should, we could do that too
//TODO: fatal error in hook should have hook name if it exists
//TODO: outputDir: path.resolve(process.env[(process.platform === 'win32' ? 'USERPROFILE' : 'HOME')] + '/suman/suman_results')
//TODO: need to add chmod to suman_results and/or suman dirs
//TODO: need to add "need your help with mocha conversion" to end of slideshow, and babel plugin for that
//TODO: need to add write to suman server to readme table
//TODO: path to root could be resolved using test paths, if the test paths are absolute?
//TODO: when maxParallelProcesses set to one some problems with below command
//TODO: node index "test/build-tests/**/*.js" "test/integration-tests/**/*.js" --transpile (does not work without transpile option set)
//TODO: add option of high-resolution time instead of Date.now() etc
//TODO: add system lock
//TODO: write to .gitignore and put test-suman-target and suman/logs in there
//TODO: optimize TestSuite/TestSuiteBase prototypes in the case that user creates many of these with looping constructs
//TODO: add a gitkeep file to suman/logs etc
//TODO: place array of tests in befores/afters so we know which tests pertain to the hook
//TODO: if a promise or non-undefined value is returned, but cb mode is on, add warning
//TODO: using t.assert etc can help prevent errors not being assigned to tests
//TODO: add support for observables
//TODO: tap: https://github.com/TestAnything/testanything.github.io/pull/36
//TODO: mocha and ava are concentric circles inside Suman
//TODO: run tests from current directory when using runner
//TODO: add exit code for hook timeout besides 1
//TODO: if user wants to collect multiple errors per test, they can use t.assert
//TODO: need to add option to include stdout when using runner
//TODO: npm install mocha -g --save-dev
//TODO: overall consolidated table can have a count of failed test files vs passed test files, and percentage
//TODO: add max memory value in overall table for runner
//TODO: need assertions to print out pretty
//TODO: if using local server and SQLite, then each cp should save data directly to db. however, if remote server, then
// should only the parent process (runner) make the network connection? Possibly remove network code from suman file
//TODO: running with bare node executable should make no network connections and only save to local db if it exists
//TODO: https://hellocoding.wordpress.com/2015/01/19/delete-all-commit-history-github/
//TODO: did you forget to call done? should become "did you forget to call fail/pass?" etc under right conditions
//TODO: implement Test.on('end') or Test.on('completed');
//TODO: if you can get tired of using this.it, you have two options, chain them, or put them in a series/parallel block
//TODO: need glob support for source //https://github.com/isaacs/node-glob
//TODO: http://altamodatech.com/blogs/?p=452  //How To Use Mocha for Node Testing in Windows
//TODO: TESTS=$(shell find test/ -name "*.test.js")
//TODO: makefiles vs. gulp vs. plain js
//TODO: need glob support for source
//TODO: to be compliant with Babel transpilation, need to put context for functions in extra param
//TODO: https://github.com/gotwarlost/istanbul/issues/596#issuecomment-208688593
//TODO: http://blog.yld.io/2016/01/13/using-streams/#.VwyjZZMrKXk
//TODO: freeze module.exports inside the init fn, iff module.exports.keys.lenght ===0
//TODO: http://stackoverflow.com/questions/10753288/how-to-specify-test-directory-for-mocha
//TODO: need to test skip and only thoroughly
//TODO: hooks after suman runs (opposite of suman.once.js) could be for collecting code/test coverage
//TODO: add hyperlinks to terminal window for table output
//TODO: give ability to users to provide shell scripts to launch individual mocha tests, that way they can provide environment
// settings for child_process, shell scripts should be in a directory called sh in the same directory as the test
//  see ./bash/a and ./bash/b
//TODO: bail + hooks https://github.com/mochajs/mocha/issues/690
//TODO: hooks always run ==> less conditionals ==> even if all tests are stubbed out, hooks still run, which makes sense
//TODO: conversion, this.title needs to work for a describe block (same as this.desc)
//TODO: add suman.gulp.js => watches with special key combo will transpile tests
//TODO: need to add ability to kill test runner after it's started - https://gist.github.com/tedmiston/5935757
//TODO: nice docs => https://cdnjs.com/libraries/backbone.js/tutorials/organizing-backbone-using-modules
//TODO: https://github.com/mochajs/mocha/issues/492
//TODO: https://www.npmjs.com/package/tap-mocha-reporter
//TODO: need to make sure to make suman_results readable/writable (move to sqlite3)
//TODO: readme needs to have examples by ES5, ES6, ES7
//TODO: default configuration should provide default values using lodash defaults / underscore defaults
//TODO: switch from underscore to lodash
//TODO: special key combo (ctrl+save+r) will run tests after a change, using gulp file watchers?
//TODO: https://nodejs.org/en/blog/uncategorized/profiling-node-js/
//TODO: need a suman server stop command at the command line
//TODO, along with options {plan:3}, {timeout:true}, {parallel:true}, {delay:100} we should have {throws:true}, so that we expect a test to throw an (async) error...
//TODO: if suman/suman runner runs files and they are not suman suites, then suman needs to report that!!
//TODO: randomize test runs as per https://github.com/sindresorhus/ava/issues/595
//TODO: write metadata file out along with txt files
//TODO  need to add a delay option for tests running in a loop (why? => google github issue)
//TODO: https://github.com/nodejs/node/issues/5252#issuecomment-212784934
//TODO: implement Test.on('end') so that we can force exit the test using process.exit()
//TODO: if this.it.only is declared need to declare other test cases as "skipped"
//TODO: allow hooks to be skipped

/* advantages of Suman
 *
 * better than mocha, cleaner than vows
 * no globals - no global NPM module - no global variables
 * test suites each run in separate process for speed and correctness
 * each test suite can have parallel components, allowing the developer to run tests serially, in parallel or in combination, as the developer sees fit
 * code inside any test will not run for any test not intended to run when using grep features
 * organize your tests depending on NODE_ENV or command line flags using config files, instead of putting tests in different top-level folders in your project
 *  asynchronous reporting capablities - write test results to DB
 *  3 reasons to use nested describes?
 *  (1) to control parallel flow - nesting in describe can force to run in series
 *  (2) skip/only - allow you to skip whole sections of a test suite
 *  (3) labelling of output - nesting in describes allows you to label and organize the output from your tests
 *
 * */


 function requireFromString(src, filename) {   //note: this is for piping tests through Suman, if ever necessary
     var Module = module.constructor;
     var m = new Module();
     m.filename = '/Users/denmanm1/WebstormProjects/oresoftware/suman/test/build-tests/test6.test.js';
     m.paths = ['/Users/denmanm1/WebstormProjects/oresoftware/suman/test/build-tests'];
     m._compile(src, filename);
     return m.exports;
 }


//TODO: move to lodash, ditch underscore
//TODO: use fs.createReadStream to check files to see if they are actually Suman tests in safe mode


//TODO: note: https://www.npmjs.com/package/gulp-mocha
//TODO: use Object.defineProperties for read-only
//TODO: observable support


//TODO: https://sumanjs.slack.com/services/109528432339?updated=1

/*

+test('handle throws with thrown observable', function (t) {
 +	ava(function (a) {
 +		a.plan(1);
 +
 +		var observable = new Observable(function (observer) {
 +			observer.error(new Error());
 +		});
 +		a.throws(observable);
 +	}).run().then(function (a) {
 +		t.false(a.assertError);
 +		t.end();
 +	});
 +});
 +
 +test('handle throws with long running thrown observable', function (t) {
 +	ava(function (a) {
 +		a.plan(1);
 +
 +		var observable = new Observable(function (observer) {
 +			setTimeout(function () {
 +				observer.error(new Error('abc'));
 +			}, 2000);
 +		});
 +
 +		a.throws(observable, /abc/);
 +	}).run().then(function (a) {
 +		t.false(a.assertError);
 +		t.end();
 +	});
 +});

